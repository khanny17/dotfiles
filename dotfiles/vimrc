" " khanny17's .vimrc
" "
" " Compiled from lots of other vimrc's and tutorials, especially:
" "     - https://github.com/jez/vim-as-an-ide
" "     - https://gist.github.com/pthrasher/3933522    

" "  -- Installation --
" " Setup Vundle:
" " For this to work, you must install the vundle plugin manually.
" " To do so, run:
" "     git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
" " 
" " Then, to install plugins, run vim +PluginInstall

set nocompatible " Fuck VI... That's for grandpas.
filetype off


" " ---------- Vundle Plugins ----------

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" " Let vundle manage itself:
Plugin 'VundleVim/Vundle.vim'

" " Just a shitload of color schemes.
" " https://github.com/flazz/vim-colorschemes#current-colorschemes
Plugin 'flazz/vim-colorschemes'

" " Fuzzy finder -- absolutely must have.
Plugin 'kien/ctrlp.vim'

" " Support for easily toggling comments.
Plugin 'tpope/vim-commentary'

" Awesome statusline
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'

" Auto insert matching delimiters
"Plugin 'Raimondi/delimitMate'

" Tags within files 
Plugin 'majutsushi/tagbar'

" Project Tree Plugin
Plugin 'scrooloose/nerdtree'
" Git support for NERDTree
Plugin 'Xuyuanp/nerdtree-git-plugin'

" Git support for vim
Plugin 'tpope/vim-fugitive'

" Syntax checking
"Plugin 'scrooloose/syntastic'

" Autocompletion 
" Plugin 'Valloric/YouCompleteMe'


" " -- Language Support --

Plugin 'leshill/vim-json'

" " vim already has syntax support for javascript, but the indent support is
" " horrid. This fixes that.
Plugin 'pangloss/vim-javascript'

" " vim indents HTML very poorly on it's own. This fixes a lot of that.
Plugin 'indenthtml.vim'

Plugin 'tpope/vim-markdown'

Plugin 'groenewege/vim-less'

Plugin 'octol/vim-cpp-enhanced-highlight'

call vundle#end()



" " ---------- End Vundle Plugins ----------


" " We have to turn this stuff back on if we want all of our features.
filetype plugin indent on " Filetype auto-detection
syntax on " Syntax highlighting



set mouse=a " enable mouse
set tabstop=4 " tabs are 4 spaces
set shiftwidth=4 " tabs are 4 spaces
set softtabstop=4 " tabs are... you guessed it... 4 spaces
set expandtab " use spaces instead of tabs.
set smarttab " let's tab key insert 'tab stops', and bksp deletes tabs.
set shiftround " tab / shifting moves to closest tabstop.
set autoindent " Match indents on new lines.
set smartindent " Intellegently dedent / indent new lines based on rules.

" " We have VCS -- we don't need this stuff.
set nobackup " We have vcs, we don't need backups.
set nowritebackup " We have vcs, we don't need backups.
set noswapfile " They're just annoying. Who likes them?

" " don't nag me when hiding buffers
" set hidden " allow me to have buffers with unsaved changes.
set autoread " when a file has changed on disk, just load it. Don't ask.

" " Make search more sane
set ignorecase " case insensitive search
set smartcase " If there are uppercase letters, become case-sensitive.
set incsearch " live incremental searching
set showmatch " live match highlighting
set hlsearch " highlight matches
set gdefault " use the `g` flag by default.

set scrolloff=2 " show 2 lines above/below cursor 

" Make splits default to appear to the right and below
set splitbelow
set splitright

set number " show line numbers
set cursorline " highlight current line
set noruler " remove ruler so we can use statusline 
set noshowmode " remove -- MODE -- indicator (since we color statusline)

" --- Status Line Setup ---

" Change Color based on mode 
function! InsertStatuslineColor(mode)
    if a:mode == 'i'
        hi statusline guibg=Cyan ctermfg=81 guifg=Black ctermbg=232
    elseif a:mode == 'v'
        hi statusline guibg=Purple ctermfg=161 guifg=Black ctermbg=0
    else
        hi statusline guibg=DarkRed ctermfg=1 guifg=Black ctermbg=0
    endif
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
" This is the default for molokai
au InsertLeave * hi statusline guibg=#455354 ctermfg=238 guifg=#455354 ctermbg=253

set laststatus=2 "enable statusline

set statusline=

set statusline+=%<\ %{toupper(mode())}%<\ " Show current mode

set statusline+=%#identifier# " Switch highlight
set statusline+=%<\ %t%<\     " File name
set statusline+=%#error#      " Switch highlight
set statusline+=%r            " Read Only flag
set statusline+=%#normal# " Switch highlight
set statusline+=\ >>
set statusline+=\ %{fugitive#statusline()}

set statusline+=%* " Switch highlight

" Error Count
"set statusline+=%#errormsg#
"set statusline+=%{youcompleteme#GetErrorCount()}
"set statusline+=%*

set statusline+=%=           " Switch to right side
set statusline+=%*           " Switch to normal statusline highlight
set statusline+=%<\          " cut at start
set statusline+=%y           " Filetype
set statusline+=\ %c\ :      " Cursor Column
set statusline+=\ %l%<\         " Line number 


" " allow the cursor to go anywhere in visual block mode.
set virtualedit+=block

" Better command-line completion
set wildmenu

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" leader is a key that allows you to have your own "namespace" of
" keybindings.
" You'll see it a lot below as <leader>
let mapleader = ","


" " So we don't have to press shift when we want to get into command mode.
nnoremap ; :
vnoremap ; :

" So we dont need to reach for esc to leave insert mode
inoremap jf <esc>

" " create new vsplit, and switch to it.
noremap <leader>v <C-w>v

" Toggle line numbers 
noremap <leader>n :set invnumber<CR>

" " bindings for easy split nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"
" " Use sane regex's when searching
" nnoremap / /\v
" vnoremap / /\v
"
" " Clear match highlighting
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

" " Quick buffer switching - like cmd-tab'ing
nnoremap <leader><leader> <c-^>

" shows open buffers, then pick one by number and press enter to open it
nnoremap gb :ls<CR>:b<Space>

" " Visual line nav, not real line nav
" " If you wrap lines, vim by default won't let you move down one line to the
" " wrapped portion. This fixes that.
" noremap j gj
" noremap k gk

" " Plugin settings:
" " Below are some 'sane' (IMHO) defaults for a couple of the above plugins I
" " referenced.
"
" " Map the key for toggling comments with vim-commentary
nnoremap <leader>c <Plug>CommentaryLine

" " Remap ctrlp to ctrl-t -- map it however you like, or stick with the
" " defaults. Additionally, in my OS, I remap caps lock to control. I never
" use
" " caps lock. This is highly recommended.
" let g:ctrlp_map = '<c-t>'

" " Let ctrlp have up to 30 results.
let g:ctrlp_max_height = 30

" " Settings for airline (statusline plugin)
" Show paste when pasting
" let g:airline_detect_paste=1

" Show airline for tabs too
" let g:airline#extensions#tabline#enabled = 1

" -------- delimitMate Settings --------

let delimitMate_expand_cr = 1
augroup mydelimitMate
    au!
    au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
    au FileType tex let b:delimitMate_quotes = ""
    au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
    au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<CR>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0))

" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeToggle<CR>
" To have NERDTree always open on startup, set this to 1
let g:nerdtree_tabs_open_on_console_startup = 1

" ----- scrooloose/syntastic -----
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"function! ToggleErrors()
"    if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
"        " No location/quickfix list shown, open syntastic error location panel
"        Errors
"    else
"        lclose
"    endif
"endfunction
"nnoremap <silent> <leader>e :<C-u>call ToggleErrors()<CR>

" ----- Valloric/YouCompleteMe -----

"will put icons in Vim's gutter on lines that have a diagnostic set.
""Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
"let g:ycm_enable_diagnostic_signs = 1
"let g:ycm_enable_diagnostic_highlighting = 1
"let g:ycm_always_populate_location_list = 1 "default 0
"let g:ycm_open_loclist_on_ycm_diags = 1 "default 1
"
"
"let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
"let g:ycm_confirm_extra_conf = 0 "Stop ycm from asking to run .ycm_extra_conf.py - risky, I know :/
"
"
"let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer','horizontal-split', 'vertical-split', 'new-tab' ]
"let g:ycm_filetype_whitelist = { '*': 1 }
"let g:ycm_key_invoke_completion = '<C-Space>'

" Force the check to run
"nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>
"" Smart GoTo (decides between goto declaration, definition, whatever)
"nnoremap <F2> :YcmCompleter GoTo <CR>
"" Open Documentation for thing under cursor
"nnoremap <leader>? :YcmCompleter GetDoc <CR>


set t_Co=256
colorscheme molokai 

